db.towns.insertOne({
name: "New York",
population: 22200000,
lastCensus: ISODate("2016-07-01"),
famousFor: [ "the MOMA", "food", "Derek Jeter" ], mayor : {
name : "Bill de Blasio",
party : "D" }
})

show collections

db.towns.find()

db.help()
db.towns.help()

db.towns.insert

function insertCity(name, population, lastCensus, famousFor, mayorInfo) {
    db.towns.insertOne({
        name: name,
        population: population,
        lastCensus: ISODate(lastCensus),
        famousFor: famousFor,
        mayor : mayorInfo
    });
}
insertCity("Punxsutawney", 6200, '2016-01-31', ["Punxsutawney Phil"], { name : "Richard Alexander" })
insertCity("Portland", 582000, '2016-09-20', ["beer", "food", "Portlandia"], { name : "Ted Wheeler", party : "D" } )

db.towns.find({ "_id" : ObjectId("630e7e4daaa80d350d0682d5") })

db.towns.find({ _id : ObjectId("630e7e4daaa80d350d0682d5") }, { name : 1 })
db.towns.find({ _id : ObjectId("630e7e4daaa80d350d0682d5") }, { name : 0 })
db.towns.find({ name : /^P/, population : { $lt : 10000 } }, { _id: 0, name : 1, population : 1 })

var population_range = { $lt: 1000000, $gt: 10000 }
db.towns.find(
{ name : /^P/, population : population_range },
{ name: 1 }
)
db.towns.find(
{ lastCensus : { $gte : ISODate('2016-06-01') } }, { _id : 0, name: 1 }
)

//hola
db.towns.find(
{ famousFor : 'food' },
{ _id : 0, name : 1, famousFor : 1 }
)
db.towns.find(
{ famousFor : /MOMA/ },
{ _id : 0, name : 1, famousFor : 1 }
)
db.towns.find(
{ famousFor : { $all : ['food', 'beer'] } }, { _id : 0, name:1, famousFor:1 }
)
db.towns.find(
{ famousFor : { $nin : ['food', 'beer'] } }, { _id : 0, name : 1, famousFor : 1 }
)
db.towns.find(
{ 'mayor.party' : 'D' },
{ _id : 0, name : 1, mayor : 1 }
)
db.towns.find(
{ 'mayor.party' : { $exists : false } }, { _id : 0, name : 1, mayor : 1 }
)


db.countries.insertOne({ _id : "us",
name : "United States", exports : {
foods : [
{ name : "bacon", tasty : true }, { name : "burgers" }
] }
})
db.countries.insertOne({
_id : "ca",
name : "Canada", exports : {
foods : [
{ name : "bacon", tasty : false }, { name : "syrup", tasty : true }
] }
})
db.countries.insertOne({ _id : "mx",
name : "Mexico", exports : {
foods : [{
name : "salsa", tasty : true, condiment : true
}] }
})

db.countries.countDocuments()
db.countries.find(
{ 'exports.foods.name' : 'bacon', 'exports.foods.tasty' : true }, { _id : 0, name : 1 }
)

// elemMatch

db.countries.find(
    {
        'exports.foods' : {
            $elemMatch : {
                name : 'bacon',
                tasty : true
            }
        }
    },
  { _id : 0, name : 1 }
)
db.countries.find(
  {
'exports.foods' : { $elemMatch : {
tasty : true,
condiment : { $exists : true } }
} },
  { _id : 0, name : 1 }
)

// Boolean Ops

db.countries.find(
{ _id : "mx", name : "United States" }, { _id : 1 }
)

db.countries.find(
  {
$or : [
{ _id : "mx" },
{ name : "United States" }
] },
{ _id:1 } )

// Updating

db.towns.updateOne(
{ _id : ObjectId("630e7e6baaa80d350d0682d7") }, { $set : { "state" : "OR" } }
);
db.towns.findOne({ _id : ObjectId("630e7e6baaa80d350d0682d7") })
db.towns.updateOne(
{ _id : ObjectId("630e7e6baaa80d350d0682d7") }, { $inc : { population : 1000} }
)

// References

db.towns.updateOne(
{ _id : ObjectId("630e7e6baaa80d350d0682d7") },
{ $set : { country: { $ref: "countries", $id: "us" } } }
)

var portland = db.towns.findOne(
{ _id : ObjectId("630e7e6baaa80d350d0682d7") }
)
portland.country
db.countries.findOne({ _id: portland.country.$id })
// TODO: No funca

// Deleting

var badBacon = {
    'exports.foods' : {
        $elemMatch : { name : 'bacon', tasty : false }
        }
    }

db.countries.find(badBacon)
db.countries.deleteMany(badBacon)
db.countries.count()

// Reading with Code

// TODO: No funca
//db.towns.find(function(a) {
//    return a.population > 6000 && a.population < 600000;
//})
//db.towns.find("this.population > 6000 && this.population < 600000")

db.towns.find({
$where: "this.population > 6000 && this.population < 600000"
})

db.towns.find({
$where: "this.population > 6000 && this.population < 600000", famousFor: /Phil/
})

// Select a town via a case-insensitive regular expression containing the word new.

db.towns.find({name:{'$regex' : 'pOrT', '$options' : 'i'}})

// Find all cities whose names contain an e and are famous for food or beer.

db.towns.find(
    { $and : [
        { name: { $regex: /e/,$options: 'i' } },
        { $or:
            [
                { famousFor: 'food' },
                { famousFor: 'beer'}
            ]
        }
        ]
    }
)


// Create a new database named blogger with a collection named articles.
// Insert a new article with an author name and email, creation date, and text.

use blogger
db.articles.insertOne({
    authorName: "jimmy bogard",
    authorEmail: "jimmy.bogard@gmail.com",
    creationDate: Date(),
    text: "Posts in this series: A Case StudyDesigning Authentication SchemesAuthorizing Client ApplicationsBuilding."
})

// Update the article with an array of comments, containing a comment with an author and text.

db.articles.updateOne(
    { _id : ObjectId("630e9232aaa80d350d0682dd") },
    { $set : { comments : [
                { text: "hola", author: "lucas"},
                { text: "chau", author: "lucas"},
                { text: "soy yo", author: "carlos"},
                { text: "dame pelota", author: "lucas"},
            ]
        }
    }
)

// ¿Cuál es el tipo de índice default que maneja Mongo? ¿Hay índices creados
// automáticamente como ocurría en PostgreSQL? Ver páginas 110 y 111.

"Seguro, anda a saber"

// Describa las semejanzas y diferencias entre el EXPLAIN de PostgreSQL y el explain de Mongo. Ver página 111.

"Jaja claro"

// Crear una base llamada academica para cargar una bajada de SGA de los títulos obtenidos por los distintos alumnos del ITBA.

use academica

//a) Importar el archivo egresados.csv usando mongoimport.

// mongoimport --db academica  --collection egresados -u bd2 -p bd2 --authenticationDatabase admin
//             --headerline --type csv mongodb://localhost:27017 egresados.csv

//b) Mostrar cuántos egresados hay por carrera (previamente ver las páginas 116 y 117).

db.egresados.aggregate(
    [
        {
            $group: {
                _id: '$titulo',
                count: {
                    $count: {}
                }
           }
        },
        {
            $project: {
                _id: 0,
                count:1,
                name: "$_id"
            }
        }
    ]
)

// c) Mostrar cuántos egresados hay por colación, ordenados de mayor a menor cantidad de egresados.

db.egresados.aggregate(
    [
        {
            $group: {
                _id: '$colacion',
                count: {
                    $count: {}
                }
           }
        },
        {
            $project: {
                _id: 0,
                colacion: "$_id",
                count:1
            }
        },
        {$sort:{"count":-1}}
    ]
)

// Set up the data

// mongoimport --db test --legacy --collection cities -u bd2 -p bd2 --authenticationDatabase admin --type json
//            mongodb://localhost:27017 cities.json

use test
db.cities.ensureIndex({ location : "2d" })

db.cities.aggregate([
    { $geoNear: { near: [45.52, -122.67], distanceField: 'dist' } },
    { $sort: { population: -1 } },
    { $project: { _id: 0, name: 1, population: 1, dist: 1 } }
])

// Mongo has support for bounding shapes (namely, squares and circles). Find all cities within a 50-mile radius around the center of London.

db.cities.find({ name: {$regex: /london/, $options: "i"}, country: 'GB'})

db.cities.aggregate([
    { $geoNear: { near: [51.50853,-0.12574], distanceField: 'dist', maxDistance: 50/3959}},
    { $sort: {dist: -1} },
    { $project: {dist:1,name:1, _id: 0, country: 1}}
])
